
 Hosting Django - Setup
========================

This is the process we are running to set up ava, in parallel with jane.

This is the third and fourth time going through this process, respectively.
Previously we did it on:

1. jane (before the disk crashed) and
2. barbara

So for additional details you may want to see:

o ../2016-jane-1/4-setup_wsgi_for_hosting_python.txt or
o ../2016-barbara/4-setup_wsgi_for_hosting_python.txt

Strategy with Regards to Virtual Environments
---------------------------------------------
We are setting up jane and ava the same as we set up barbara:

1. Install python3 as the python used by mod_wsgi.
2. Install django 1.10 for use globally by default.
3. Maintain some sort of record (copy of source, or github version hash, or?) of
   precisely which version of django 1.10 we installed globally.
4. Use virtual environments (virtualenv command, etc.) to experiment with and
   upgrade python or django or both, first on jane, then on barbara, then on ava

References:
-----------
Using this page as the driver:
    https://docs.djangoproject.com/en/1.10/topics/install/

For many many many more links to info about adding apache2 mod_wsgi, see:

o ../2016-jane-1/4-setup_wsgi_for_hosting_python.txt

Process: - Install and configure apache mod_wsgi for serving django sites
-------------------------------------------------------------------------
2016-10-28 - doing this on ava

1. Mod-wsgi "Hello World" Program
---------------------------------
[ ] First get mod-wsgi "Hello World" example working
    For security reasons, we are installing the latest version
    Starting here:
         https://modwsgi.readthedocs.io/en/develop/getting-started.html
    Requirements:
        "It is highly recommended that you use Apache 2.4"
[ ] apache2 -v   ## Server version: Apache/2.4.18 (Ubuntu)
    Installation -> Quick Installation Guide -> Apache Requirements
        "On Linux systems, if Apache has been installed from a package repository, you must have
         installed the corresponding Apache “dev” package as well."
    As root:
      dpkg-query -l apache2-dev
      apt-get install -y apache2-dev
[ ] If dev packages for python and python3 are not installed, install them
    Quick Installation Guide -> Python Requirements
        "On Linux systems, if Python has been installed from a package repository, you must have
         installed the corresponding Python “dev” package as well."
    As root:
      dpkg-query -l python-dev
      apt-get install -y python-dev
      dpkg-query -l python3-dev
      apt-get install -y python3-dev
    On barbara, jane, and ava:
      dpkg-query -l 'python*' | wc -l                 ## (1)
      dpkg-query -l 'python*' | grep '^i' | wc -l     ## (2)
      dpkg-query -l 'python3*' | wc -l                ## (3)
      dpkg-query -l 'python3*' | grep '^i' | wc -l    ## (4)
    Results:
          barbara   jane   ava
      (1)     266    194   108
      (2)     111     78    33
      (3)     125    122    59
      (4)      70     66    25
    ** TODO: RECONCILE THESE DIFFERENCES (remove or install packages as appropriate) **
    ** NOTE: There may well be valid reasons for the server (ava) to have fewer packages **
[ ] Unpack the mod_wsgi tarball saved in the always_learning_python repon on github
    As tomh on jane:
      cd /var/www/learn/django/github/customizations/always_learning_python/
      cd downloads/
      cp mod_wsgi-4.5.7.tar.gz ~/tmp
      cd ~/tmp
      toAva mod_wsgi-4.5.7.tar.gz
    As tomh on ava:
      cd
      mv tmp wsgi
      mkdir tmp
      mkdir wsgi/unpack
      cd wsgi
      mv mod_wsgi-4.5.7.tar.gz unpack
      cd unpack
      tar -xvzf mod_wsgi-4.5.7.tar.gz
      rm mod_wsgi-4.5.7.tar.gz
      l
      cd mod_wsgi-4.5.7/
      l
[ ] Quick Installation Guide -> Configuring the Source Code
    Note: specifying python3 in ./configure command below
    As tomh on ava:
      which apxs      # /usr/bin/apxs
      which python3   # /usr/bin/python3
      ./configure --with-apxs=/usr/bin/apxs --with-python=/usr/bin/python3   ## config.status: creating Makefile
      echo $?   ## exit status: 0
[ ] Quick Installation Guide -> Building the Source Code
    As tomh:
      make
      echo $?   ## exit status: 0
      sudo make install
      ### ----------------------------------------------------------------------
      ### Libraries have been installed in:
      ###    /usr/lib/apache2/modules
      ###
      ### If you ever happen to want to link against installed libraries
      ### in a given directory, LIBDIR, you must either use libtool, and
      ### specify the full pathname of the library, or use the `-LLIBDIR'
      ### flag during linking and do at least one of the following:
      ###    - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
      ###      during execution
      ###    - add LIBDIR to the `LD_RUN_PATH' environment variable
      ###      during linking
      ###    - use the `-Wl,-rpath -Wl,LIBDIR' linker flag
      ###    - have your system administrator add LIBDIR to `/etc/ld.so.conf'
      ###
      ### See any operating system documentation about shared libraries for
      ### more information, such as the ld(1) and ld.so(8) manual pages.
      ### ----------------------------------------------------------------------
[ ] Quick Installation Guide -> Loading Module Into Apache
    As root:
      cd /etc/apache2/mods-available/
      more *.load         # many are one-liners
      vi wsgi.load
      cat wsgi.load       # contents: only this one line
      LoadModule wsgi_module /usr/lib/apache2/modules/mod_wsgi.so
      a2enmod wsgi
      service apache2 stop
      service apache2 start
      mkdir RCS
      ci -l wsgi.load
[ ] Quick Configuration Guide - getting the "Hello World" wsgi app to run:
    https://modwsgi.readthedocs.io/en/develop/user-guides/quick-configuration-guide.html
    Get a copy of the configuration file and update as appropriate (fix host name in ServerAlias):
    As root:
      cd /etc/apache2/sites-available/
      vi 150-wsgi.test.conf
      a2ensite 150-wsgi.test.conf
      service apache2 reload
    As tomh on jane:
      cd /var/www/learn/django/github/customizations/always_learning_python/3-mod_wsgi/Site
      toAva -y sample_app.py
    As root on jane:
      vi /etc/hosts
    Add the following line to /etc/hosts on jane:
      127.0.1.1	ava.wsgi.test
    Using daemon mode, as proposed in original process run on jane
    Access in browser on jane:
        http://ava.wsgi.test/
    For details on how we came up with the 150-wsgi.test.conf file, see:
        https://github.com/tomwhartung/always_learning_python/tree/master/3-mod_wsgi
        https://github.com/tomwhartung/always_learning_python/blob/master/3-mod_wsgi/README.md
[ ] Cleanup hello world files
    As tomh on ava:
      cd /var/www/
      rm -fr learn
    As root on ava:
      a2dissite 150-wsgi.test.conf
      service apache2 stop
      service apache2 start
    As root on jane:
      vi /etc/hosts  ## comment out line added above

2. Mod_wsgi and Django
----------------------
[ ] Obtain a copy of 050-seeourminds.com.conf
    Copy /etc/apache2/sites-available/050-seeourminds.com.conf from barbara
    Update 050-seeourminds.com.conf as appropriate
    Enable the site and restart apache
    As root:
      a2ensite 050-seeourminds.com.conf
      service apache2 reload
    Optional: access the site at http://ava.seeourminds.com/
      -> should get "Internal Server Error"
[ ] Install pip3, virtualenv, and django
    Reference:
        https://github.com/tomwhartung/always_learning_python/blob/master/README.md
    Verify version consistency on barbara, jane, and ava
    As root on barbara, jane, and ava, before the install:
      dpkg-query -l python3-pip
      dpkg-query -l '*pip*'
      dpkg-query -l virtualenv
    As tomh:
      sudo apt-get install -y python3-pip
      pip3 install virtualenv          ## It said installed 8.1.1 and to upgrade to 8.1.2 ...
      pip3 install --upgrade -y pip    ## ... so I did, but it is still not in my path
      which virtualenv                 ## /home/tomh/.local/bin/virtualenv (NOTE: different from barbara and jane)
      sudo apt install virtualenv      ## Also had to do this for some strange reason...
      which virtualenv                 ## /home/tomh/.local/bin/virtualenv (NOTE: different from barbara and jane)
    As root:
      which virtualenv                 ## /usr/bin/virtualenv (OK...)
    As root on barbara, jane, and ava, after the install:
      dpkg-query -l python3-pip
      dpkg-query -l '*pip*'
      dpkg-query -l virtualenv
[ ] Install django globally - rationale
    We are installing django globally...
    We are not going to use virtualenv right now on production and backup hosts
    Installing it anyway because we may (will probably) want it when it comes time to
      try running our site using different versions of python or django or both.
    For reference, in case we change our mind, we can use it with commands like:
    ## virtualenv --python=`which python3` ~/.virtualenvs/djangodev
[ ] Check for previous installs and uninstall as necessary:
    As tomh:
      python3 -m django --version
      python3 -c "import django; print(django.__path__)"
[ ] Clone latest source into djangostable, checkout latest branch, and install it globally
    This process is what we used in the always_learning_python repo's README.md file, and
      seems to work well enough
    [ ] Step (1) ensure we have a copy of the seeourminds.com repo:
        As tomh (these steps may already be done, but just in case...):
          cd /var/www
          mkdir -p seeourminds.com/htdocs/
          cd seeourminds.com/htdocs/
          git clone https://github.com/tomwhartung/seeourminds.com.git
    [ ] Step (2) clone a copy of the stable version of django:
        As tomh:
          cd seeourminds.com/djangostable/
          git clone git@github.com:django/django.git
          cd django
          git checkout stable/1.10.x
          git status   # check status
          git branch   # check branch
          git log      # commit 8f428c82969d6f1e90f9fe2cbaff346d5d8c711a dated Sat Oct 15
          cd ..
          sudo -H pip3 install Django
    [ ] Step (3) Verify the current install:
      python3 -m django --version                         ## 1.10.2
      python3 -c "import django; print(django.__path__)"  ## ['/usr/local/lib/python3.5/dist-packages/django']
    Note: django is currently NOT available for use with python2, aka. "python" :
      python -m django --version                          ## /usr/bin/python: No module named django
      python -c "import django; print(django.__path__)"   ## ImportError: No module named django
[ ] Fix static content problem without breaking the ability to run python's built-in server on localhost
    Note: django is currently NOT available for use with python2, aka. "python" :
      python manage.py runserver    ## "ImportError: Couldn't import Django. Are you sure it's installed..."
      python3 manage.py runserver   ## Runs ok
    Test running the site through apache and python's internal server side-by-side:
      http://localhost:8000/           ## Still finds static content ok
      http://barbara.seeourminds.com/  ## Unable to find static content
    Fix by adding an Alias for the static content dir to the apache config file (050-seeourminds.com.conf)
      Reference: https://docs.djangoproject.com/en/1.10/howto/deployment/wsgi/modwsgi/#serving-files
      > Alias /static/ /var/www/seeourminds.com/htdocs/seeourminds.com/Site/content/static






[ ] Review Deployment Checklists
    For a few of these that we have found along the way, see
    0-install_ubuntu.urls
 


[ ] Disk Space Spotcheck:
    /:     
    /home: 
    /var/www: X.XG/XXG (XX%)

---------------------------------------------
If installing on a server, you can stop here.
---------------------------------------------

