#!/usr/bin/python3
#
# lnDrupalCustomizations.py: links our customizations, so we can keep them separate from the drupal code
# ------------------------------------------------------------------------------------------------------
#
import os
from os import chdir, getcwd, listdir, makedirs
from os.path import isfile, isdir, islink
from subprocess import call
import sys   # for accessing command line arguments

##
#  Prints a syntax statement
#
def syntax() :
	basename = os.path.basename( sys.argv[0] )
	print( 'Syntax:' )
	print( '  ' + basename + ' [mainSiteDir]' )
	print( '    mainSiteDir must contain a version of the Drupal core code' )
	print( '      mainSiteDir defaults to ' + defaultMainSiteDir  )

##
#  Checks that the specified directory exists, exiting with an error message if it doesn't
#
def verifyDirectory( dirToCheck ) :
	if isdir( dirToCheck ) :
		print( 'Found a ' + dirToCheck + ' directory, cool.' )
	else:
		print( 'Expecting a "' + dirToCheck + '" directory, but it is not here.' )
		print( 'The current directory is: "' + htdocsDir + '"' )
		print( 'Change to a different directory, preferably one named "htdocs," and try again.' )
		exit( 1 )

##
#  Checks that the specified directory contains something resembling a Drupal install, making subdirs if necessary
#     If the check for a modules subdirectory is successful
#        display a "Found ... cool" message
#     else
#        display an error message and exit
#     If the check for themes subdirectory is successful
#        display a "Found ... cool" message
#     else
#        display an error message and exit
#
def verifyDrupalInstall( mainSiteDir ) :
	if isdir( mainSiteDir ) :
		if isdir( mainSiteModulesDir ) :
			print( 'Found a ' + mainSiteModulesDir + ' directory, cool!' )
		else :
			print( 'Error: there is no modules directory!' )
			print( 'Expecting a "' + mainSiteModulesDir + '" directory, but it is not here.' )
			print( 'The current directory is: "' + htdocsDir + '"' )
			print( 'Change to a directory that has a subdirectory containing a Drupal 8 install, and try again.' )
			exit( 11 )
		if isdir( mainSiteThemesDir ) :
			print( 'Found a ' + mainSiteThemesDir + ' directory, cool!' )
		else :
			print( 'Error: there is no themes directory!' )
			print( 'Expecting a "' + mainSiteThemesDir + '" directory, but it is not here.' )
			print( 'The current directory is: "' + htdocsDir + '"' )
			print( 'Change to a directory that has a subdirectory containing a Drupal 8 install, and try again.' )
			exit( 13 )
	else :
		print( 'Error: there is no main site directory!' )
		print( 'Expecting a "' + mainSiteDir + '" directory, but it is not here.' )
		print( 'The current directory is: "' + htdocsDir + '"' )
		print( 'Change to a directory that has a subdirectory containing a Drupal 8 install, and try again.' )
		exit( 15 )

##
#  Checks for modules/jmws and themes/jmws directories, making them if necessary
#
def checkForJmwsDirs( mainSiteDir ) :
	if isdir( mainSiteModulesJmwsDir ) :
		print( 'Found a ' + mainSiteModulesJmwsDir + ' directory, cool!' )
	else :
		print( 'Warning: making the ' + mainSiteModulesJmwsDir + ' directory, because it was not found.' )
		os.makedirs( mainSiteModulesJmwsDir )
	if isdir( mainSiteThemesJmwsDir ) :
		print( 'Found a ' + mainSiteThemesJmwsDir + ' directory, cool!' )
	else :
		print( 'Warning: making the ' + mainSiteThemesJmwsDir + ' directory, because it was not found.' )
		os.makedirs( mainSiteThemesJmwsDir )

##
#  Links directories containing jmws modules
#
def lnModulesDirs( customization ) :
	print( 'Linking modules/jmws directories for customization ' + customization + '...' )
	rootedSourceDir = htdocsDir + '/' + customizationsDir + '/' + customization + '/modules/jmws'
	rootedDestinationDir = htdocsDir + '/' + mainSiteModulesJmwsDir
	drupalJmwsModules = listdir( rootedSourceDir )
	## print( 'lnModulesDirs: rootedSourceDir = ' + rootedSourceDir )
	## print( 'lnModulesDirs: rootedDestinationDir = ' + rootedDestinationDir )
	## print( 'lnModulesDirs: drupalJmwsModules = ', end="" )
	## print( drupalJmwsModules )
	for moduleDir in drupalJmwsModules :
		rootedModuleDir = rootedSourceDir + '/' + moduleDir
		if( isdir(rootedModuleDir) ) :
			print( '\tlinking "' + rootedModuleDir + "\" to\n\t\t\"" + rootedDestinationDir + '"' )
			lnCommand = "    cd " + rootedDestinationDir + ";\n    ln -fs " + rootedModuleDir + " .;\n    cd " + htdocsDir 
			## print( "lnCommand:\n" + lnCommand )
			call( lnCommand, shell=True )

##
#  Links directories containing jmws themes
#
def lnThemesDirs( customization ) :
	print( 'Linking themes/jmws directories for customization ' + customization + '...' )
	rootedSourceDir = htdocsDir + '/' + customizationsDir + '/' + customization + '/themes/jmws'
	rootedDestinationDir = htdocsDir + '/' + mainSiteThemesJmwsDir
	drupalJmwsThemes = listdir( rootedSourceDir )
	## print( 'lnThemesDirs: rootedSourceDir = ' + rootedSourceDir )
	## print( 'lnThemesDirs: rootedDestinationDir = ' + rootedDestinationDir )
	## print( 'lnThemesDirs: drupalJmwsThemes = ', end="" )
	## print( drupalJmwsThemes )
	for themeDir in drupalJmwsThemes :
		rootedThemeDir = rootedSourceDir + '/' + themeDir
		if( isdir(rootedThemeDir) ) :
			print( '\tlinking "' + rootedThemeDir + "\" to\n\t\t\"" + rootedDestinationDir + '"' )
			lnCommand = "    cd " + rootedDestinationDir + ";\n    ln -fs " + rootedThemeDir + " .;\n    cd " + htdocsDir 
			## print( "lnCommand:\n" + lnCommand )
			call( lnCommand, shell=True )

##
#  Driver function to call other functions to link specific types of customizations
#
def lnCustomization( customization ) :
	## print( 'Linking directories in the ' + customization + ' customization...' )
	thisCustomizationDir = customizationsDir + '/'  + customization
	thisCustomizationContents = listdir( thisCustomizationDir )
	thisCustomizationContents.sort()
	for entity in thisCustomizationContents :
		pathToEntity = thisCustomizationDir + '/' + entity
		## print( 'lnCustomization: pathToEntity = ' + pathToEntity )
		if ( entity == 'modules' and isdir(pathToEntity) ) :
			lnModulesDirs( customization )
		elif ( entity == 'themes' and isdir(pathToEntity) ) :
			lnThemesDirs( customization )

####################################################################################
#
#  Main program driver code starts here
#
customizationsDir = 'customizations'
defaultMainSiteDir = 'tomhartung.com'
htdocsDir = getcwd()
exitVal = 0

if ( len(sys.argv) == 1 ) :
	mainSiteDir = defaultMainSiteDir
elif ( len(sys.argv) == 2 ) :
	if ( sys.argv[1] == '-h' ) :
		syntax()
		exit( 0 )
	else :
		mainSiteDir = sys.argv[1]
else :
	syntax()
	print( 'Error:' )
	print( '   Unexpected number of arguments.' )
	print( 'Exiting.' )
	exit( 1 )

mainSiteModulesDir = mainSiteDir + '/modules'
mainSiteThemesDir = mainSiteDir + '/themes'
mainSiteModulesJmwsDir = mainSiteModulesDir + '/jmws'
mainSiteThemesJmwsDir = mainSiteThemesDir + '/jmws'

verifyDirectory( customizationsDir )   # if directory is present, prints "cool" message, else exits
verifyDrupalInstall( mainSiteDir )     # if it's a Drupal install, prints multiple "cool" messages, else exits
checkForJmwsDirs( mainSiteDir )        # check for modules/jmws and themes/jmws dirs, making them if necessary

#
#  List the customizations dirs and link each of them as appropriate
#
customizations = listdir( customizationsDir )
customizations.sort()
print( 'Linking the following customizations to the appropriate directories in ' + mainSiteDir + ':' )
print( '   ', end=""  )
print( customizations )

for customization in customizations:
	lnCustomization( customization )

exit( exitVal )
