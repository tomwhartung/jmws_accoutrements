#!/usr/bin/python3
#
# bu: backs up a mysql database
# -----------------------------
#
import os       # for getting values for environment vars
import socket   # for getting the hostName
import sys      # for accessing command line arguments
import time     # for the date string in our backup file name
from subprocess import call

#
# Import the functions that we share with the dbMySqlRestore
# Process the command line arguments
#
import dbFunctions
arguments = dbFunctions.processArguments( 'backup' )
siteArg = arguments[0]
suffixArg = arguments[1]

#
#  Set these credential-containing globals to default values
#  The Top Secret Db File sets these to the correct secret values for our Dbs
#
dbName = ''
dbUser = ''
dbPass = ''
siteName = siteArg

#
#  Run the Top Secret Db Credentials File that sets the credential-containing globals (dbName, dbUser, dbPass).
#  For best results, this file should be "locked down," e.g., in your home directory with its permissions set to 700
#  Never ever ever check this top secret file in to a public repository,
#     else people will be able to hack your DB!!!!
#  For more information, see the comments in dbCredentialsFileExample.py
#
dbCredentialsFileDefault = 'dbCredentialsFileExample.py'
dbCredentialsFileEnviron = ''

try :
	dbCredentialsFileEnviron = os.environ['DB_CREDENTIALS_FILE']
except :
	pass

if( dbCredentialsFileEnviron == '' ) :
	dbCredentialsFile = dbCredentialsFileDefault
else :
	dbCredentialsFile = dbCredentialsFileEnviron

exec( compile(open(dbCredentialsFile,"rb").read(), dbCredentialsFile, 'exec'), globals(), locals() )

#
# If we don't have a password, the -p arg to mysql causes it to prompt them for it
#
if ( dbPass == '' ) :
	passwordArg = '-p'
else :
	passwordArg = '--password=' + dbPass

#
# If we don't have a specific user, we know that the root user will always be there
#
if ( dbUser == '' ) :
   dbUser = 'root'

#
# Check the environment for a setting for the backup directory
# If it is not set, use the default
#
dbBackupDirectoryDefault = '.'
dbBackupDirectoryEnviron = ''

try :
	dbBackupDirectoryEnviron = os.environ['DB_BACKUP_DIRECTORY']
except :
	pass

if( dbBackupDirectoryEnviron == '' ) :
	dbBackupDirectory = dbBackupDirectoryDefault
else :
	dbBackupDirectory = dbBackupDirectoryEnviron

#
# If we have a suffix, prefix it with a dash, to separate it from the hostname
#
suffixString = ''
if( suffixArg != '' ) :
	suffixString = '-' + suffixArg

dateString = time.strftime( '-%Y_%m_%d-' )
hostName = socket.gethostname()
backupFileName = dbBackupDirectory + '/' + siteName + dateString + hostName + suffixString + '.sql.tgz'

backupCommand = 'mysqldump --quick --opt -u ' + dbUser + ' ' + passwordArg + ' ' + dbName + ' | gzip > ' + backupFileName
chmodCommand = 'chmod 600 ' + backupFileName

print( 'siteArg = ', siteArg )
print( 'siteName = ', siteName )
print( 'suffixArg = ', suffixArg )
print( 'suffixString = ', suffixString )
### print( 'dbName = ', dbName )
### print( 'dbUser = ', dbUser )
### print( 'dbPass = ', dbPass )
### print( 'passwordArg = ', passwordArg )
### print( 'hostName = ', hostName )
### print( 'dateString = ', dateString )
### print( 'dbBackupDirectoryEnviron = ', dbBackupDirectoryEnviron )
### print( 'backupFileName = ', backupFileName )
print( 'backupCommand = ', backupCommand )
### print( 'chmodCommand = ', chmodCommand )

print( 'Backing up DB for site', siteName, 'to', backupFileName, '...' )

## call( backupCommand, shell=True )
## call( chmodCommand, shell=True )

