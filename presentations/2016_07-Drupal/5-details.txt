
 Adding Device Detection to Three Popular LAMP CMSes
=====================================================

o Started with an adapter class (IdMyGadget), allowing easily switching between different Device Detectors
  o To see IdMyGadget in action without a CMS, see my resume at tomwhartung.com/resume
o Adaptive Web Design seeks to solve the same problem as Responsive Web Design, but in a different way
  o Responsive techniques serve the same markup to all devices, along with CSS rules (media queries), and
    the CSS rules cause the browser to position, show, and hide markup based on parameters such as resolution, screen width, etc.
  o Adaptive techniques use the User Agent string to determine the type of device the user is on, and
    based on that, serves (slightly or massively) different content to the browser
o Takeaways:
  o It is not an either-or type situation
  o I believe a combination of the two is the best solution
  o If not done properly, this can get very complicated very quickly, so
    proper encapsulation and scoping is essential
   o jQuery Mobile is very nice, but you would not want to use it on the desktop
     Just including this and allowing people to build on and use it, might be a valuable use-case in and of itself


 Lessons Learned and Other Takeaways
-------------------------------------
If trying to learn WordPress, Drupal, and jQuery Mobile all at the same time sound challenging, I can say that yes, it is.
To me though, this is really fun.  And it is super fun to work on different CMSes in parallel.  Tired of working for free though.

By making use of inheritance in separating what works for all of them from the CMS-specific functionality,
I was able to use quite a bit of code, more than expected, on all three.

I really did not need to set up separate repos for the different CMSes; branching would have been a better solution.

Doing two templates/themes at a time is a good idea, if one is simpler (do it first) than the other.

Because I was learning these (especially WP and the Drupals) as I went along, I found it easier
to add the functionality to a simple theme (Our Theme in WP, Stark in Drupal), then once that
looked OK, add the bare minimum to the "real" theme (TwentyThirteen and Bartik).

Doing something like this takes a long time the first time, but goes more quickly with "practice."
I would like to do more work like this, and not just with PHP CMSes....

Adaptive WD and Responsive WD can work fine together.
I'd suggest doing the Adaptive part first, and use it to make adding the Responsive part easier.

Not a fan of the Drupal coding standards. Makes using the same IDE for Joomla and/or WP a pain;
have to change the options all too frequently, wound up switching between eclipse and netbeans (always using vi).

Adding the jQuery Mobile data role attributes was particularly fun (same for all, but go in different places,
so easy and hard at the same time).

Miss-steps:
WP - TwentyFifteen: adding DD to it did not work well, started over with TwentyThirteen
Drupal 7: jQuery Mobile incompatibility issue
Drupal 8: there were many miss-steps, see obsolete repos on github
    actually found valuable information on youtube and even twitter

Drupal 8: what you get for enduring its complexity
o  Caching - great for production
o  Core is now largely based on the Symfony framework
o  Unit testing framework built in
o  (Mostly) clear separation of backend and front end code
   (Did see a <p> tag in a module's message, when my understanding was that all markup was in the theme layer)
o  Ready (or getting there) for IoT (REST/"headless drupal")
o  Uses PHP Name spaces (a new development in the language,
   but very valuable for this sort of kernel_plugin type of architecture)

If I was going to do this again, I would do Drupal first.
o It forces (or at least strongly encourages and enables) you to organize your code better (e.g., namespaces)
o The others (especially WP) would be a piece of cake



 Challenges:
-------------
Caching in drupal is a major issue
o If the caching mechanism does not know that you are using device detection, it will not work properly
  It caches the markup for whatever type of device hits it first, then serves that to all devices
o There is a way to turn it off but I do not trust it for Drupal 8
  o whitescreens (state of DB and filesystem are intertwined, if it gets "confused" your site dies, totally)
  o experience makes me believe that turning it off is not enough
    (sometimes I do not see changes to code reflected in the markup, so I clear it anyway, to be "safe")
  o clearing in back end seems to be more thorough (but subject to being disabled by whitescreens)
  o clearing using drush is easier but seems to not do quite as thorough a job
Multiple IDEs
o Drupal has strict coding standards, indent by two spaces, do not use tabs
o I was a spaces person for a long time but just recently converted to tabs...
Where I spent my time
o Really I spent very little time on coding
o A great deal of time was spent researching, especially device detection and drupal
o Spent quite a bit of time learning jQuery Mobile but did not use very much of it
o Spent a huge amount of time on Drupal but have very little to show for it
o Something complicated like is best learned in a book, so you can:
  o Get background information by reading the first few chapters sequentially
  o Use the TOC, flip through apparently-relevant chapters, and use the index to find what you need
  o The web is a viable substitute, but many of the D8 pages are labelled "Incomplete" or "Needs Updating"
  o Resorting to having to find info on youtube, twitter, and in the core source is time consuming

 Recommendations:
------------------
In a case like this, where I am inventing the process as I go, it is nice when I can work on things in parallel.
E.g., add the module/library to each CMS, instantiate and initialze device detection in all CMSes, add css to all templates/themes, add js to all templates/themes, add the options, update the html, etc.


