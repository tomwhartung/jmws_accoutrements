#!/usr/bin/python3
#
# dbMySqlCommand: runs mysql using parameters derived from a site abbreviation
# ----------------------------------------------------------------------------
# The tricky part is to allow storing the credentials in a confidential manner. 
# For more information, see the comments in dbMySqlCredentialsEg.py .
#
import os       # for getting values for environment vars
import sys      # for accessing command line arguments
from subprocess import call  # for running commands

#
#  Import the functions that we share with dbMySqlBackup
#  Note that siteArg is the only command line argument we care about here
#
import dbMySqlFunctions
arguments = dbMySqlFunctions.processArguments( 'command' )
siteArg = arguments[0]

#
#  Run the Top Secret Db Credentials File to get the values we need to
#    set the credential-containing globals dbNames, dbUsers, dbPasswords.
#  For more information, see the comments in dbMySqlCredentialsEg.py
#
dbNames = {}
dbUsers = {}
dbPasswords = {}
siteName = siteArg

dbCredentialsFile = dbMySqlFunctions.getDbCredentialsFile()
exec( compile(open(dbCredentialsFile,"rb").read(), dbCredentialsFile, 'exec'), globals(), locals() )

dbName = dbNames[siteName]
dbUser = dbUsers[siteName]
dbPassword = dbPasswords[siteName]

#
#  Use functions to refine and get the remaining values we need
#
dbPasswordArg = dbMySqlFunctions.getDbPasswordArg( dbPassword )
dbUserArg = dbMySqlFunctions.getDbUserArg( dbUser )

print( 'dbName = ', dbName )
print( 'dbUser = ', dbUser )
print( 'dbPassword = ', dbPassword )
print( 'dbPasswordArg: ', dbPasswordArg )

mysqlCommand = 'mysql ' + dbUserArg + ' ' + dbPasswordArg + ' ' + dbName

print( 'calling mysqlCommand = "', mysqlCommand, '"' )
call( mysqlCommand, shell=True )
