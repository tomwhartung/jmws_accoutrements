
 Looking at Three Popular LAMP CMSes From a Developer's Perspective
===================================================================
Adding Device Detection to Joomla, WordPress, and Drupal: Compare and Contrast

What I did on my summer code-cation (that lasted well into the winter, thanks in large part to Drupal 8).

 Introduction
--------------
What:
Implemented Adaptive Web Design (as opposed to Responsive Web Design) by adding Device Detection to Drupal 7 & 8, Joomla, and WordPress

Why (other than "because it's there"):
o Have been curious about Drupal for many years.
o Want to find where I want to be in the new gadget-laden technological environment. (1)
o Frankly, it does not make much business sense to take the better part of a year off to do this. (2)
o But I have learned what my ideal job (this year, anyway) would be (see very end of file).

How:

 Caveat/Disclaimer
-------------------
I am not an expert in any one of these.
Being so seems to preclude the ability to be objective, which is my goal.
I have more experience in Joomla than the others, so that, and the Goldilocks Effect, make me a bit biased.

Google and SEO - "Dynamic Serving:"
-----------------------------------
I have found some information on what google thinks about testing the User Agent string.
References:
o https://support.google.com/webmasters/answer/66355?hl=en&ref_topic=6001971 (cloaking)
o https://developers.google.com/webmasters/mobile-sites/mobile-seo/dynamic-serving
Google has various methods for crawling your site.
It uses Fetch as Google but they understand that things may look different to curl, wget, and in the browser.
Google considers cloaking - testing the User Agent string for the google bot and serving different
content to the google bot/crawler than to browsers - to be serious violation of their guidelines.
Obviously, if a site serves disney characters to the crawler and porn to browsers, we have a serious problem.
Google also expresses concern about trusting the User Agent string, due to changes (new devices)
o See dynamic serving link
o Ensure the package you are using is kept up to date
o Use an adapter class that enables easily switching between third party detectors
o It depends on your use case - what you want to accomplish
o My work is strictly experimental, prototyping, having fun exploring this idea
o Using jQuery Mobile for navigation introduces the possibilities of more practical applications, i.e., input elements on forms

 Some Ideas About Format/Goals:
--------------------------------
Open to Suggestions for How, or even Whether, to Proceed With This Idea
Some personal facts to keep in mind:
o First real job was programming assembler in 1976
o Not ashamed to admit that I did COBOL for ten years
o Not competitive whatsoever, born in NC, did not watch Super Bowl, just really truly hate all that....
o All about being unique and enjoy doing something no one else is doing
o Very proud of my github streak.

Use Cases:
My original use case: enhance web presence to make it easier to find a job
Mobile-only navigation: which seems most practical?
a. header and footer nav
b. hamburger menu icons
c. both
d. other? _____________________________________
Mobile-Only Forms
o jQuery Mobile is very nice, but you would not want to use it on the desktop
  Just including this and allowing people to build on and use it, might be a valuable use-case in and of itself
o HTML5 form elements address some of these issues, but I am unsure about specifics and mobile browser support.

Phase 1: Develop these extensions
Phase 2: See several possibilities.  Not sure how to proceed and would appreciate some gentle feedback.
o Look for corporate minion job
o Polish one or more of these and put in the extension store for the CMS(es)
o Continue CMS work on a freelance basis
o Found a startup that specializes in this sort of work
  - Make it easy for site admins and other extension developers to do this

 Miscellaneous Thoughts Had While Working on Other Things
----------------------------------------------------------
Joomla: the Goldilocks CMS: not too wordpressy/php4 time bomb, not too drupally/complicated, just right?

Observation: Switching between these is difficult, and not very productive, but fun, and very enlightening.

Observation: Doing something like this takes a long time the first time, but goes more quickly with "practice."
I would like to do more work like this, and not just with PHP CMSes....

Observation: PHP Namespaces, part of the language as of version 5.3, is a language feature these tools should definitely be using.
Drupal 8 is the only one using them, it will be interesting to see if and when Joomla and WP follow suit.

 Details
---------
XXXXXX:
o Drupal 7: 
o Drupal 8: 
o Joomla: 
o Wordpress: 

XXXXXX:
  o Drupal: 
  o Joomla: 
  o Wordpress: 

By the numbers (spreadsheet?):
o download sizes,
o number of files,
o number of DB tables,
o lines of css
o Contributed extensions:
  o Drupal: 31,000 contributed modules
  o Joomla: over 7,700 free and commercial extensions
  o Wordpress: over 40,501 plugins


By the not-so-quantifiable other stuff:
---------------------------------------
Difficulty of upgrading minor revisions (scale of 1-10)


License:
o Drupal: GPLv2 or later
o Joomla: GNU General Public License
o Wordpress: GNU GPLv2+

Versions and histories
o Drupal: 8.0.3; Initial release January, 2001
o Joomla: 3.4.8; Initial release August 17, 2005
o Wordpress: 4.4.1; Initial release May 27, 2003

Hi-Level/Overview:
o Drupal 7: hooks
o Drupal 8: Symfony used for modules, themes still use mainly hooks
o Joomla:
o Wordpress: hooks

Finding documentation:
o Drupal 7: 
o Drupal 8: When I was working on it, much was missing and incomplete.  It's nice that they tell you when pages "Need Work."
o Joomla:
o Wordpress:

Extension Types:
o Drupal 7: modules and themes
o Drupal 8: modules and themes
o Joomla: components, modules, templates, plugins (not the same as WP plugins), and libraries
o Wordpress: plugins and themes

Adding options:
All are different:
o Drupal 7: array based
o Drupal 8: OOP and array based
o Joomla: xml-based)
o Wordpress: array based

Finding markup:
o Drupal 7: 
o Drupal 8: When I was working on it, much was missing and incomplete.  It's nice that they tell you when pages "Need Work."
o Joomla:
o Wordpress:

again, joomla is different, having a "mainline" in index.php
wp and drupal use templates, which is a little confusing at first, but easy enough once you get going
Drupal Reference: https://www.drupal.org/node/190815

Managing js and css:
Much more difficult than it should be!
The CMS wants to control that for you.
It should be OK to just include a link tag, and I suppose you could, but that is not what you are supposed to do.
Instead, each has its vastly different "super clever" way of doing things.  Uhg what a pain.
o Drupal 7: 
o Drupal 8:
o Joomla:
o Wordpress: enqueue something

Community:
Drupal seems to have the most closely-knit community, with many conferences.
Tried to create an account on joomla.org several times, to no avail
Was able to create one easily on drupal.org and wordpress.org.

XXXXXX:
o Drupal 7: 
o Drupal 8:
o Joomla:
o Wordpress:

 Challenges:
-------------
Multiple IDEs
o Drupal coding standards

 Recommendations:
------------------
If I was going to do this again, I would do Drupal first.
o It forces (or at least strongly encourages and enables) you to organize your code better (e.g., namespaces)
o The others (especially WP) would be a piece of cake

It is much easier to find a simplistic, minimal template and add device detection to that first, then work on one that is more complicated.

In a case like this, where I am inventing the process as I go, it is nice when I can work on things in parallel.
E.g., add the module/library to each CMS, instantiate and initialze device detection in all CMSes, add css to all templates/themes, add js to all templates/themes, add the options, update the html, etc.

 Summary/Conclusions:
----------------------
If trying to learn WordPress, Drupal, and jQuery Mobile all at the same time sound challenging, I can say that yes, it is.

I was able to use quite a bit of code, more than expected, on all three.

I really did not need to set up separate repos for the different CMSes; branching would have been a better solution.

Doing two templates/themes at a time is a good idea, if one is simpler (do it first) than the other.

Not a fan of the draconian drupal code standards. Makes using the same IDE for wp a pain (have to change the options all too frequently).

Making use of inheritance in separating what works for all of them from the CMS-specific functionality, is huge fun for me.

Adding the jQuery Mobile data role attributes was particularly fun (same for all, but go in different places,
so easy and hard at the same time).

Ideal Job?
----------
I think my ideal job would be doing this at a company with several other people.
I would like to do some of the production coding but also mentor others on how to do that.
I would like to spend 10-20 hrs per week on research: implementing similar techniques in (adding similar functionality to)
python CMSes (e.g., Django), JS frameworks (e.g., MEAN stack), maybe even java.

 Notes:
--------
(1) I was reading a lot of the O'Reilly books and was very intrigued by some information about device detection in Building Android Apps with CSS, JavaScript, and HTML5 by Jonathan Stark, which has some information about device detection in an appendix.
(2) I keep reading in various email newsletters I get, about how more and more people are freelancing, and must admit it holds a certain appeal....

