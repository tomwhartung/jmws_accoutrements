
 Adding Device Detectio to Three Popular LAMP CMSes
====================================================
Aka. What I did on my code-cation.

 High-Level Outline
====================
1. Brief Description of What I Am Working On
2. Questions I Have for You at the End
3. Status of What I Am Working On
4. Comparing the Three CMSes
5. Details: Delving Into Code (Optional, Depending on Interest)
   Idea: let me clean up the code a bit then submit it to the group for review at a future date
   --> Is this of interest to people?
6. Lessons and other Takeaways
7. Your Questions for Me
8. My Questions for You

 Introduction
--------------
A Little Bit About Me:
o First real job was programming assembler in 1976
o Not ashamed to admit that I did COBOL for ten years
o Not competitive whatsoever, born in NC, did not watch Super Bowl, just really truly hate all that....
o All about being unique and enjoy doing something no one else is doing
o Very proud of my github streak.

What:
o Implemented Adaptive Web Design (as opposed to Responsive Web Design) by adding Device Detection to Joomla, WordPress, and Drupal 7 & 8
o Started with an adapter class (IdMyGadget), allowing easily switching between different Device Detectors
  o To see IdMyGadget in action without a CMS, see my resume at tomwhartung.com/resume
o Adaptive Web Design seeks to solve the same problem as Responsive Web Design, but in a different way
  o Responsive techniques serve the same markup to all devices, along with CSS rules (media queries), and
    the CSS rules cause the browser to position, show, and hide markup based on parameters such as resolution, screen width, etc.
  o Adaptive techniques use the User Agent string to determine the type of device the user is on, and
    based on that, serves (slightly or massively) different content to the browser
o Takeaways:
  o It is not an either-or type situation
  o I believe a combination of the two is the best solution
  o If not done properly, this can get very complicated very quickly, so
    proper encapsulation and scoping is essential

Why:
o Wanted to improve my web presence, to make it easier to find a job
o Thinking that I might want to try free-lancing rather than full time employment (because that is a trend)
o Thinking that the three are similar and learning all can give me insight and allow me to leverage commonalities
o Have to re-do my groja.com/seeourminds.com component, so may want to pick a different CMS
o Have been curious about Drupal for many years

My Opinions Are Subject to Bias:
o I have more experience in Joomla than the others, so that, and the Goldilocks Effect, make me a bit biased.
o Please do not repeat any of the negative things I might say about Drupal, if I get an offer of $$$ to work with it, I will probably go for it
    "Will do Drupal (or most any other type of coding) for food."

Takeaways:
o Joomla is in many respects the Goldilocks CMS
o I will be sticking with Joomla for my groja.com/seeourminds.com component (but convert as much as possible to JavaScript, because it is ubiquitous)
o Drupal (especially D8) has a lot of unique and valuable features, but is also very very complicated,
  o This makes it more time-consuming than the others to work with

 My Questions for You (Your Mission: To Answer These at the End)
-----------------------------------------------------------------
1. Do you think this idea is worth pursuing, or should I go back to full time corporate drone work?
o  I have been hanging out a bit with the startup community....
o  There may not be a high demand for this (right now) but I am fine with that
o  I believe that as time goes on demand will grow, and it would be very cool to be prepared to take advantage of that
   (This seems to be what people expect now: for someone to have already solved a problem they just now became aware of.)

2. Do you have any use cases - scenarios in which you think this technique would be useful?
o  Looking to brainstorm ideas....
o  I believe more people would be willing to use this technique if they had easy-to-use tools already built
o  I'd like to think that offering a freemium-type product would be an excellent way to bring in business
o  To do this right, I'd want to know what sort of things would interest people, i.e., use cases

 Status of What I Am Working On
--------------------------------
Joomla site (joomoowebsites.com): development done but could be refactored
WordPress site (tomwhartung.com): development mostly done, menus not yet fully functional because I need to add content first
Drupal site (tomhartung.com): device-specific headings are working, menus not yet fully functional because I need to add content first

 Comparing the Three CMSes
---------------------------
By the numbers (spreadsheet?):
o download sizes,
o number of files,
o number of DB tables,
o lines of css
o Contributed extensions:
  o Drupal: 31,000 contributed modules
  o Joomla: over 7,700 free and commercial extensions
  o Wordpress: over 40,501 plugins


By the not-so-quantifiable other stuff:
---------------------------------------
Difficulty of upgrading minor revisions (scale of 1-10)
  o Drupal: 
  o Joomla: 
  o Wordpress: 

License:
o Drupal: GPLv2 or later
o Joomla: GNU General Public License
o Wordpress: GNU GPLv2+

Versions and histories
o Drupal: 8.0.3; Initial release January, 2001
o Joomla: 3.4.8; Initial release August 17, 2005
o Wordpress: 4.4.1; Initial release May 27, 2003

Hi-Level/Overview:
o Drupal 7: hooks
o Drupal 8: Symfony used for modules, themes still use mainly hooks
o Joomla:
o Wordpress: hooks

Finding documentation:
o Drupal 7: 
o Drupal 8: When I was working on it, much was missing and incomplete.  It's nice that they tell you when pages "Need Work."
o Joomla:
o Wordpress:

Extension Types:
o Drupal 7: modules and themes
o Drupal 8: modules and themes
o Joomla: components, modules, templates, plugins (not the same as WP plugins), and libraries
o Wordpress: plugins and themes

Adding options:
All are different:
o Drupal 7: array based
o Drupal 8: OOP and array based
o Joomla: xml-based)
o Wordpress: array based

Finding markup:
o Drupal 7: 
o Drupal 8: When I was working on it, much was missing and incomplete.  It's nice that they tell you when pages "Need Work."
o Joomla:
o Wordpress:

again, joomla is different, having a "mainline" in index.php
wp and drupal use templates, which is a little confusing at first, but easy enough once you get going
Drupal Reference: https://www.drupal.org/node/190815

Managing js and css:
Much more difficult than it should be!
The CMS wants to control that for you.
It should be OK to just include a link tag, and I suppose you could, but that is not what you are supposed to do.
Instead, each has its vastly different "super clever" way of doing things.  Uhg what a pain.
o Drupal 7: 
o Drupal 8:
o Joomla:
o Wordpress: enqueue something

Community:
Drupal seems to have the most closely-knit community, with many conferences.
Tried to create an account on joomla.org several times, to no avail
Was able to create one easily on drupal.org and wordpress.org.

XXXXXX:
o Drupal 7: 
o Drupal 8:
o Joomla:
o Wordpress:

XXXXXX:
o Drupal 7: 
o Drupal 8: 
o Joomla: 
o Wordpress: 

XXXXXX:
  o Drupal: 
  o Joomla: 
  o Wordpress: 


 Details: Delving Into Code
----------------------------
Optional, depending on interest
Maybe save this for next time?

 Lessons and other Takeaways
----------------------------

 Your Questions for Me
-----------------------
First, this answer to some questions from last time.

Google and SEO - "Dynamic Serving"
I have found some information on what google thinks about testing the User Agent string.
References:
o https://support.google.com/webmasters/answer/66355?hl=en&ref_topic=6001971 (cloaking)
o https://developers.google.com/webmasters/mobile-sites/mobile-seo/dynamic-serving
Google has various methods for crawling your site.
It uses Fetch as Google but they understand that things may look different to curl, wget, and in the browser.
Google considers cloaking - testing the User Agent string for the google bot and serving different
content to the google bot/crawler than to browsers - to be serious violation of their guidelines.
Obviously, if a site serves disney characters to the crawler and porn to browsers, we have a serious problem.
Google also expresses concern about trusting the User Agent string, due to changes (new devices)
o See dynamic serving link
o Ensure the package you are using is kept up to date
o Continuous Integration (frequently deploying even minor changes) is becoming increasingly popular
  Moreover, anything that can be done with a fixed set of specific commands is subject to automation
o Use an adapter class that enables easily switching between third party detectors
o It depends on your use case - what you want to accomplish
o My work is strictly experimental, prototyping, having fun exploring this idea

New Questions?

 My Questions for You
----------------------
Possible Use Cases:
My original use case: enhance web presence to make it easier to find a job (also see Another Reason below)
Mobile-only navigation: which seems most practical?
a. header and footer nav
b. hamburger menu icons
Mobile-Only Forms
o Using jQuery Mobile for navigation introduces the possibilities of more practical applications, i.e., input elements on forms
o jQuery Mobile is very nice, but you would not want to use it on the desktop
  Just including this and allowing people to build on and use it, might be a valuable use-case in and of itself
o HTML5 form elements address some of these issues, but I am unsure about specifics and mobile browser support.
O Potentially a lot of people don't even use mobile devices because they think their fingers are too fat (possible line in Rescue Me?)

Phase 1: Develop these extensions
Phase 2: See several possibilities.  Not sure how to proceed and would appreciate some gentle feedback.
o Look for corporate minion job
o Polish one or more of these and put in the extension store for the CMS(es)
o Continue CMS work on a freelance basis
o Found a startup that specializes in this sort of work
  - Make it easy for site admins and other extension developers to do this

 Miscellaneous Thoughts Had While Working on Other Things
----------------------------------------------------------
Joomla: the Goldilocks CMS: not too wordpressy/php4 time bomb, not too drupally/complicated, just right?

Observation: Switching between these is difficult, and not very productive, but fun, and very enlightening.

Observation: Doing something like this takes a long time the first time, but goes more quickly with "practice."
I would like to do more work like this, and not just with PHP CMSes....

Observation: PHP Namespaces, part of the language as of version 5.3, is a language feature these tools should definitely be using.
Drupal 8 is the only one using them, it will be interesting to see if and when Joomla and WP follow suit.


 Challenges:
-------------
Caching in drupal is a major issue
o If the caching mechanism does not know that you are using device detection, it will not work properly
  It caches the markup for whatever type of device hits it first, then serves that to all devices
o There is a way to turn it off but I do not trust it for Drupal 8
  o whitescreens (state of DB and filesystem are intertwined, if it gets "confused" your site dies, totally)
  o experience makes me believe that turning it off is not enough
    (sometimes I do not see changes to code reflected in the markup, so I clear it anyway, to be "safe")
  o clearing in back end seems to be more thorough (but subject to being disabled by whitescreens)
  o clearing using drush is easier but seems to not do quite as thorough a job
Multiple IDEs
o Drupal has strict coding standards, indent by two spaces, do not use tabs
o I was a spaces person for a long time but just recently converted to tabs...
Where I spent my time
o Really I spent very little time on coding
o A great deal of time was spent researching, especially device detection and drupal
o Spent quite a bit of time learning jQuery Mobile but did not use very much of it
o Spent a huge amount of time on Drupal but have very little to show for it
o Something complicated like is best learned in a book, so you can:
  o Get background information by reading the first few chapters sequentially
  o Use the TOC, flip through apparently-relevant chapters, and use the index to find what you need
  o The web is a viable substitute, but many of the D8 pages are labelled "Incomplete" or "Needs Updating"
  o Resorting to having to find info on youtube, twitter, and in the core source is time consuming

 Recommendations:
------------------
If I was going to do this again, I would do Drupal first.
o It forces (or at least strongly encourages and enables) you to organize your code better (e.g., namespaces)
o The others (especially WP) would be a piece of cake

It is much easier to find a simplistic, minimal template and add device detection to that first, then work on one that is more complicated.

In a case like this, where I am inventing the process as I go, it is nice when I can work on things in parallel.
E.g., add the module/library to each CMS, instantiate and initialze device detection in all CMSes, add css to all templates/themes, add js to all templates/themes, add the options, update the html, etc.

 Summary/Conclusions:
----------------------
If trying to learn WordPress, Drupal, and jQuery Mobile all at the same time sound challenging, I can say that yes, it is.

I was able to use quite a bit of code, more than expected, on all three.

I really did not need to set up separate repos for the different CMSes; branching would have been a better solution.

Doing two templates/themes at a time is a good idea, if one is simpler (do it first) than the other.

Not a fan of the draconian drupal code standards. Makes using the same IDE for wp a pain (have to change the options all too frequently).

Making use of inheritance in separating what works for all of them from the CMS-specific functionality, is huge fun for me.

Adding the jQuery Mobile data role attributes was particularly fun (same for all, but go in different places,
so easy and hard at the same time).

Ideal Job?
----------
I think my ideal job would be doing this at a company with several other people.
I would like to do some of the production coding but also mentor others on how to do that.
I would like to spend 10-20 hrs per week on research: implementing similar techniques in (adding similar functionality to)
python CMSes (e.g., Django), JS frameworks (e.g., MEAN stack), maybe even java.

