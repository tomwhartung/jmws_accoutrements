
 Experimenting With Extras
===========================
Making notes on how to install "extra" packages we want to experiment with
so that if we like them we have the instructions readily available for
next time.

Running these commands on bette.
--------------------------------
We should be able to run these on other hosts.

Install the Sublime text editor
-------------------------------
I am happy with vi, and it is pretty much always there, but I want to install
sublime because:

o It was definitely ok when I used it before (but I like vi, so...)
o I would think it has matured and gotten better since the last time I tried it
o This real python class recommends it, and they might know more about it than I do

The process is pretty easy - only one reference needed!

Reference:
    http://unix.stackexchange.com/questions/159094/how-to-install-a-deb-file-by-dpkg-i-or-by-apt

[ ] Download the latest .deb file from:
      http://www.sublimetext.com/
[ ] Move the .deb file to the apt archives dir:
    As tomh:
      cd /var/cache/apt/archives
      sudo mv ~/Downloads/sublime-text_build-3126_amd64.deb .
      l sublime-text_build-3126_amd64.deb
[ ] Simulate installing it:
    As tomh:
      sudo apt-get -s install ./sublime-text_build-3126_amd64.deb
[ ] Install it for realsies:
    As tomh:
      sudo apt-get install ./sublime-text_build-3126_amd64.deb
[ ] Note:
      The command to run sublime is not "sublime" or "sublime-text" , it's "subl"
[ ] Make sure it's in our path, and make sure we can run it:
    As tomh:
      which subl   ## /usr/bin/subl
      subl

Install Apps for Working With Media
-----------------------------------
[ ] Install SoundConverter (useful for converting wma files to mp3)
    Search for it in the Ubuntu Software app
    Install and lock to launcher
[ ] Install Kdenlive...

Install KVM for Working With VMs
--------------------------------
References:
  (1) Looks to be a bit old but should be ok nonetheless:
      https://help.ubuntu.com/community/KVM/Installation
  (2) More recent (for 16.04) and includes steps to set up bridged networking:
      https://linuxconfig.org/simple-virtualization-with-ubuntu-16-04-and-kvm
  (3) More recent:
      https://www.linuxbabe.com/desktop-linux/how-to-install-kvm-and-create-virtual-machines-on-ubuntu-desktop
[ ] Ensure the hardware supports virtualization:
    As tomh:
      egrep -c '(vmx|svm)' /proc/cpuinfo
    Output must be > 0
      (else use virtualbox or VMware)
[ ] Check for 64-bit OS
      uname -m
    Output should be 'x86_64'
    ('x86_64 is synonymous with amd64.')
[ ] Set up bridged networking:
    Search apps (first icon in tool bar) for Network
    Open Network Connections app
    See list of networks (Wired connection 1, etc.)
    Add -> Connection Type: Virtual -> Bridge -> Dialog
    Must be checked:
      General tab -> Automatically connect to this network when it is available
      General tab -> All users may connect to this network
      Bridge tab -> Add -> Connection Type: Ethernet -> Create...
        Editing bridge0 slave 1 Dialog:
          Ethernet tab -> Device: (select) enp19s0
            This is the Wired Connection we have set up for general use
          General tab -> Automatically connect to this network when it is available
          General tab -> All users may connect to this network
          Save
    All others: accept defaults (for now):
      Bridge tab -> name: bridge0
      IPv4 Settings tab -> Method: DHCP
      Save
    Run command:
      sudo systemctl restart networking
    *** TODO, per https://linuxconfig.org/simple-virtualization-with-ubuntu-16-04-and-kvm
    *** "Delete the existing connection that was added to the bridge."
    *** (Leaving that alone for now...)
    ************
    *** UPDATE 2017-01-05:
    *** -> Yikes now my other hosts can't access bette!  Undoubtedly because of this step!
    *** -> Running "Network Connections" (now locked to launcher)
    *** -> Deleting the "bridge0 slave 1" connection under the "Ethernet" section
    *** -> This leaves the "Bridge" section with two entries ("Bridge connection 1" and "virbr0")
    *** -> This fixes access to bette from my other hosts!  Whew!
    ************
[ ] Install kvm and dependencies, etc.:
    Run standard commands to update system:
      sudo apt-get update
      sudo apt-get upgrade
    Run commands to install kvm and dependencies (each reference is a little different):
      Reference (1): sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils
        No virt-manager (the graphical user interface)
      Reference (2): sudo apt-get install qemu-kvm libvirt-bin virt-manager
        No bridge-utils (which we will probably want)
      Reference (3): sudo apt-get install qemu-kvm libvirt-bin bridge-utils virt-manager virtinst virt-viewer
        Most complete of the lists (and safest)
    This time (experimenting for the first time) we are going with door number (3):
      sudo apt-get install qemu-kvm libvirt-bin bridge-utils virt-manager virtinst virt-viewer
    Add tomh to the libvirtd group:
      sudo gpasswd -a tomh libvirtd
    Note: must re-login for this to take effect
[ ] Check installation:
    Run command:
      virsh list --all
    If it doesn't work, you probably need to log out, for the gpasswd command to take effect, then log back in
[ ] Start the Virtual Machine Manager
    Click on the Ubuntu "Search your computer" icon and search for "Virtual Machine Manager"
[ ] Create VMs
    --> See VM-specific instructions, in this repo, under doc/ubuntu/vms

Install Packages for Real Python Class
--------------------------------------
Moved this section to a new file, 5-updating_python_etc.txt .

NOTE: that file also contains details about the commands used to install
nodejs and npm.

Install the Atom text editor
----------------------------
Let's take it for a test drive.
References:
    http://tipsonubuntu.com/2016/08/05/install-atom-text-editor-ubuntu-16-04/
    https://medium.com/how-to-install/how-to-install-atom-editor-in-ubuntu-14-04-1c761af5e2ba#.qxsakukw5
Both references agree on the same fairly simple steps (saved for future reference only).
[ ] Add ppa, update, and install
    sudo add-apt-repository ppa:webupd8team/atom
    sudo apt-get update
    sudo apt install atom

Install Sqlite Database Browser
-------------------------------
Open the orange Ubuntu Software app and search for and install the Sqlite Database Browser app

Update vim for Python PEP 8
===========================
Wow it turns out this PEP 8 is a huge thing!

Reference:
* https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/

There's a lot on this page, and we want to keep track of changes so we can undo them or make them on other hosts, as appropriate.
I am only doing a fraction of it now, but if these changes work out well, we may want to return and try more of the suggestions.

Vundle - vim plugin manager
---------------------------
This in itself is a huge rabbit hole!  Let's try just a little at a time!

References:
* https://github.com/VundleVim/Vundle.vim
* https://github.com/axiaoxin/vim-settings (bookmarked for later)
* https://github.com/adilansari/dot_files/blob/master/vim/.vimrc (bookmarked for later)

Check the version:
   vim --version

Install Vundle - as both tomh and root:

   git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim

No need to mkdir .vim/bundle, git clone will make it for us.

Add support for vundle to .vimrc:
   vi .vimrc

Install the plugin:
-------------------
I think we need to run this on each host:
   vi tmp/xyz.py
   :PluginInstall

I also think we need to run it only once (on each host).

Also adding ...
---------------
Also adding (see first (realpython) reference):

o Python Indentation:
  - PEP 8
  - Full Stack (js, css, html)
o Flagging unnecessary whitespace
o UTF-8 (tried once before...)

The "Full Stack" changes do not seem to be working very well....
** Note that the comments contain some corrections! **

Some new commands to try:
-------------------------
o :sp <filename.py>   # split screen
  Maybe add to .vimrc:
    set splitbelow
    set splitright
  More .vimrc-maybes:
    move between the splits without using the mouse:
      "split navigations
      nnoremap <C-J> <C-W><C-J>
      nnoremap <C-K> <C-W><C-K>
      nnoremap <C-L> <C-W><C-L>
      nnoremap <C-H> <C-W><C-H>
o System clipboard:
    set clipboard=unnamed
  ** Could this help fix my Ctrl-C/Shift-Ctrl-C issues somehow? **

Consider adding ...
-------------------
We may want to consider adding code to vimrc to support:

o Code folding
o Auto-completion (Youcompleteme)
o Virtualenv support
o File browsing
o Powerline (files open, virtualenv, etc.)

Trying out vim support on the command line:
-------------------------------------------
From near the end:
   vi .inputrc    # add code from comment in next line:
   cat .inputrc   # file contains: "set editing-mode vi"

