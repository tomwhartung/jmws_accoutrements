
 Updating Python Etc.
======================
We are playing around with some python on bette, and want to have
our process down for when it comes time to upgrade the installations
on jane, barbara, and ava.

Running these commands on barbara
---------------------------------
NOTE:
It appears we need version 0.12 of flask for the test_insert_functions function
in db_access.py to work.
So we need to upgrade these packages on barbara and ava when deploying!

NOTE:
We need to be very cognizant of what versions of python, flask, and django we are
running on the servers!

NOTE:
We may want to consider using virtual environments on the servers at some point.
However, I would like to avoid doing that, in the interest of keeping it simple,
which means keeping installed software and versions to the bare minimum.

Upgrade Python
--------------
[ ] Upgrade python 3.5 to 3.6
    References:
      http://askubuntu.com/questions/865554/how-do-i-install-python-3-6-using-apt-get
      http://www.ubuntumaniac.com/2016/12/python-360-is-released-install-on.html
    As root:
      add-apt-repository ppa:jonathonf/python-3.6
      apt-get update
      apt-get install python3.6

Upgrade Flask
-------------
[ ] Upgrade flask to version 0.12
    (This is a little trick I learned in the real python class.)
    As root:
      pip3 uninstall flask
      pip3 install flask==0.12

Install sendmail for groja.com
------------------------------
We need sendmail on all servers so we can use python to send emails:
Note that this fixes the following error:
    ConnectionRefusedError: [Errno 111] Connection refused
[ ] Install sendmail
    As root:
      apt-get update
      apt-get upgrade -y
      apt-get -y install sendmail
NOTE: Got the following warning when installing sendmail on barbara
      (and all the others too, btw):
   "Warning: 3 database(s) sources
      were not found, (but were created)
      please investigate."
Tried googling this but did not see anything about how to fix it.

Install PostgreSQL Database for Storing SeeOurMinds.com Quiz Results
--------------------------------------------------------------------
References:
* https://www.digitalocean.com/community/tutorials/how-to-use-postgresql-with-your-django-application-on-ubuntu-16-04
* https://djangogirls.gitbooks.io/django-girls-tutorial-extensions/content/optional_postgresql_installation/
* https://wiki.postgresql.org/wiki/Detailed_installation_guides#General_Linux

[ ] Install postgres in ubuntu:
    As root:
      apt-get update
      dpkg-query --list python3-pip
      dpkg-query --list python3-dev
      dpkg-query --list libpq-dev
      apt-get install libpq-dev postgresql postgresql-contrib -y
[ ] Enter the postgres shell:
    As root:
      su - postgres
      psql        # prompt changes
[ ] Use the postgres shell to create the user and database:
    In the postgres shell:
      CREATE USER som_user WITH PASSWORD 'abc123';
      CREATE DATABASE som_db owner som_user;
      ALTER ROLE som_user SET client_encoding TO 'utf8';
      ALTER ROLE som_user SET default_transaction_isolation TO 'read committed';
      ALTER ROLE som_user SET timezone TO 'MST';
      \q      ## log out
[ ] Install python postgres "psycopg2" package globally:
    As root:
       pip3 install psycopg2
[ ] Verify installation of python postgres "psycopg2" package:
    As tomh:
      python3 -c "import psycopg2"    ## no errors means it worked
      python3
      >>> import psycopg2
      >>> psycopg2.__version__        ## '2.7.1 (dt dec pq3 ext lo64)'

Install PhpPgAdmin
------------------
** DO NOT DO THIS ON PRODUCTION HOSTS!!!  DUH!!! **

Updating the Django Settings File:
----------------------------------
References:
* https://www.digitalocean.com/community/tutorials/how-to-use-postgresql-with-your-django-application-on-ubuntu-16-04
* https://djangogirls.gitbooks.io/django-girls-tutorial-extensions/content/optional_postgresql_installation/

[ ] Summary of commands to run to enter the postgres shell:
    As root:
      su - postgres
      psql
[ ] Summary of test db credentials:
    User/pwd: som_user/abc123
    DB: som_db
[ ] Update the settings.py file to use these values:
    Note: the two references use slightly different engins
        'ENGINE': 'django.db.backends.postgresql_psycopg2',  ## digital ocean
        'ENGINE': 'django.db.backends.postgresql',           ## djangogirls
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'django_test',
            'USER': 'seeourminds',
            'PASSWORD': 'abc123',
            'HOST': 'localhost',
            'PORT': '',
        }
    }

First Deploy: Create Fresh Postgres Database for Django Site
------------------------------------------------------------
Reference:
* https://github.com/tomwhartung/always_learning_python/tree/master/23-som_postgresql_exp
For extremely detailed notes about how we learned to do this, see the README.md
file in the 23-som_postgresql_exp project in the always_learning_python repo.

[ ] Backup and restore functionality is TBD
    -> For subsequent deployments, we will need to use backup and restore functionality
    TODO: Research this and write no-brainer scripts similar to what we have for mysql
[ ] Pre-requisite: create postgres user and database
    This is covered above, see the section entitled:
    -> "Use the postgres shell to create the user and database"
    This *must* be done before running the following commands!
[ ] Optional: starting fresh:
    Because this is the first deployment, we are starting fresh.
    -> For subsequent deployments, we will want to backup and run migrations
    See the Reference given above for details (we did this like a thousand times!)
    [ ] Kill app: if it's running, exit the app.
    [ ] Use the postgres shell to drop and re-create the database:
        -> This assumes the som_user has already been created, as described above
        As root:
          su - postgres
          psql        # prompt changes
          DROP DATABASE som_db;
          CREATE DATABASE som_db owner som_user;
          ALTER ROLE som_user SET client_encoding TO 'utf8';
          ALTER ROLE som_user SET default_transaction_isolation TO 'read committed';
          ALTER ROLE som_user SET timezone TO 'MST';
          \q
[ ] Commit the migrations on jane and ensure all code is pushed to github
    Because we want the db on barbara to exactly match the db on jane,
    -> this process is very different from what we did on jane!
    [ ] Ensure latest copy of the migrations file (only one at this time)
        is up-to-date in git.
        As tomh *on* *jane*:
          goshs   # /var/www/seeourminds.com/htdocs/seeourminds.com
          cd Site/content/migrations
          ga 000*                    # git add file if necessary
          gc 'Latest migrations!'    # git commit if necessary
    [ ] Ensure latest code is pushed to github
        As tomh *on* *jane*:
          goshs
          gpom                       # git push origin master, yo!
    ** If the latest code isn't in github, results will be unpredictable! **
[ ] Stop apache while we do this:
    ** This and the next three steps should be done as quickly as possible **
    It's just the back up host, so no one should be hitting it, but
      it's good practice for doing the real thing on ava
    As root *on* *barbara*:
      service apache2 stop
[ ] Push new settings to barbara:
    As tomh *on* *jane*:
      goshs   # /var/www/seeourminds.com/htdocs/seeourminds.com
      cd gitignored/Site/Site
      toBarbara settings.py   # Have the next steps ready to go before running this!
[ ] Pull code, run migrations and update the static files on barbara:
    -> We will *always* want to run these steps
    As tomh *on* *barbara*:
      goshs   # /var/www/seeourminds.com/htdocs/seeourminds.com
      cd Site/bin
      gp                    # git pull the latest code
      ./catmigrations.sh    # Run a final check!
      ./migrate.sh          # Need the new settings.py file for this to run!
      ./collectstatic.sh
[ ] Restart apache and test:
    As root *on* *barbara*:
      service apache2 start
    Access in browser:
      http://barbara.seeourminds.com/
[ ] If there are problems, even if they are cosmetic
    [ ] Try clearing the browser cache, using a different browser, or
          if issues are cosmetic, try browsing privately/going incognito
    [ ] Try running it locally:
    As tomh:
      goshs   # /var/www/seeourminds.com/htdocs/seeourminds.com
      cd Site/bin
      ./collectstatic.sh
      ./run.sh
    Access in browser:
      http://127.0.0.1:8000/
[ ] Use the app to check the db.
    -> We do not have phppgadmin on barbara!
    To test: create a couple of quizzes and reload them

